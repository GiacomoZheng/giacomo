: ; ring, or unital_ring, or unital_rng
(
	"rng with multiplication identity"
	⊆ rng,
	(
		∀R: ∈ ring,
		R.1: ∈ R,
		¬(R.1 = R.0), ; ? I prefer this version
		∀a: ∈ R, R.1 R.× a = a = a R.× R.1, ; multiply identity

		; attributes
			R.action:
			(
				⊆ rng.action,
				(
					∀π: ∈ action,
					π.D = R,
					@π,
						∀s: ∈ S, π(D.1)(s) = s
					■
				)
			),

			R.module:
			(
				"ring module",
				⊆ rng.module,
				(
					∀M: ∈ module,
					M.π ∈ R.action ; here it is the ring (left) action
					M ⊆ M.π.S,

					M.R: = R,
				)
			)
	),
	[ hierarchy chain: ring ⊆ rng ⊆ abelian_group ]
	; location
		; about alias
			commutative_domain: = integral_domain,

			regular_module: = module,
			l'module: = module,
			left_module: = l'module,
			; + r'module: = anti_module,
			; + right_module: = r'module,

			ker(∀f: ∈ homomorphism): = f.kernel,
		; end

		; + about inheritance
			sub(∀R: ∈ ring):
			(
				⊆ ring,
				⊆ rng.sub(R), ; the same "×"

				∀H: ∈ sub(R),
				H.1 = G.1
			),

			min_sub[∀G: ∈ ring](∀S: ⊆ G):
			(
				⊆ sub(G),
				∀H: ∈ min_sub[G](S),
				S ∈ set.sub(G)
			),

			ideal(∀R: ∈ ring): = rng.ideal(R),
			
			proper_ideal(∀R: ∈ ring): = rng.proper_ideal(R),

			maximal_ideal(∀R: ∈ ring): = rng.maximal_ideal(R),

			prime_ideal(∀R: ∈ ring): = rng.prime(R),

			nil(∀R: ∈ ring): = rng.nil(R),

			char(∀R: ∈ ring): = rng.char(R),
		; end
		
		; rep[∀R: ∈ ring]: =

		unit(∀R: ∈ ring): = {x|∃x': ∈ R, x' R.× x = R.1 = x R.× x'}[∀x: ∈ R],
		; it is a group over R.× of all the units in a ring

		inv[∀R: ∈ ring](∀x: ∈ unit(R)):
		(
			"valid because of the inverse is unique",
			∃x': ∈ R, x' R.× x = R.1 = x R.× x',
			= x'
		),

		; for special elements
			involution(∀R: ∈ ring):
			(
				⊆ set.element(R),
				∀x: ∈ involution(R),
				x R.× x = R.1
			),
		; end
),
