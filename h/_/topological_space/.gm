: ; topological_space, or top'space
(
	"topological space via approach to",
	⊆ set, ; * I give up my "→" version ; ! I cannot deal with some problems like Hausdorff and compact with my version now
	(
		∀X: ∈ topological_space,
		X.τ: ∈ topology(D), ; in the tools
		; attibutions
			; via open set
				X.basis: ; do not be confuse with the basis in tools
				(
					⊆ sub(X.τ), ; a class
					∀ℬ: ∈ X.basis,
					∀U: ∈ τ, ∃ℬ': ⊆ ℬ, U = ∪(ℬ')
					; for U = ∅, just pick ℬ' empty
				),

				X.open_cover(∀A: ∈ sub(X)): ; ?
				(
					⊆ X.cover(A),
					⊆ set.sub(X.τ)
				),

				; about alias
					X.base: = X.basis,
					X.𝒯: = X.τ, ; I won't use this one later
					; ! X.topology: ; it may cause me confused
					X.open: = set.element(X.τ), ; directly trans it to a class
				; end
			; end

			; via neighborhood
				X.nbh(∀x: ∈ X):
				(
					⊆ set.sub(X),
					∀Y: ∈ X.nbh(x),
					∃O: ∈ X.τ, x ∈ O,
					O ⊆ Y
				),
				; about alias
					X.Nbh: = X.nbh,
					X.neighborhood: = X.nbh,
				; end
			; end

			; via closed set
				X.closed: ; ?
				(
					⊆ set.sub(X),
					∀F: ∈ closed(X),
					∀x: ∈ X, (∃y: ∈ F, y X.→ x) ⇒ x ∈ F
				),
			; end

			; ? about arrow
				X.→:
				(
					∈ relator,
					∀{x, y}: ⊆ X, x X.→ y ⇔ X.nbh(x) ⊇ X.nhb(y)
				),

				X.←:
				(
					∈ relator,
					∀{a, b}: ⊆ X, a X.← b ⇔ b X.→ a
				),

				X.↔: ; * Topological indistinguishability
				(
					∈ relator,
					∀{a, b}: ⊆ X, a X.↔ b ⇔ ∀(a X.→ b, b X.→ a)
				),
			; end

			; about closure interor and boundary
				X.accumulation_point(∀A: ⊆ X): = {x|∀N: ∈ X.nbh(x), !(A ∩ N\{x} = ∅)}[ ; + bug ...
					∀x: ∈ X],
				X.closure(∀A: ⊆ X): = {x|∀N: ∈ X.nbh(x), !(A ∩ N = ∅)}[ ; + bug ...
					∀x: ∈ X], ; the minimal closed set in X containing the A
					; = {x|∃a: ∈ A, a X.→ x}[∀x: ∈ X], ; ?
				X.interior(∀A: ⊆ X): = {x|A ∈ X.nbh(x)}[∀x: ∈ X], ; the maximal open set in X contained in the A,

				X.exterior(∀A: ⊆ X): = X.interior(X \ A),

				X.boundary(∀A: ⊆ X): = X.closure(A) \ X.interior(A),
			; end

			; + about identification space or quotient space
				X.identification_space:
				(
					⊆ set.partition(X),
					∀Q: ∈ X.identification_space,
					Q.τ = {U|∪[∀x: ∈ U](x) ∈ X.τ}[∀U: ∈ set.Ps(Q)] ; ? ∪
				),
				X.quotient_space: = X.identification_space, ; I don't choose this name as I think in topology, it has nothing to do with the "quotient"
			; end

			; about compact subspace
				X.compact:
				(
					⊆ set.sub(X),
					⊆ compact_space
				),
			; end
	),

	; location
		; about tools to construct topological space
			topology(∀D: ∈ set): ; +
			(
				"a topological structure on D",
				⊆ set.cover(D),
				∀τ: ∈ topology(D),
				(∅ ∈ τ),
				(∀{A, B}: ⊆ τ, A ∩ B ∈ τ),
				(∀𝒞: ⊆ τ, ∪(𝒞) ∈ τ) ; ! ∪ ; so that D ∈ τ
			),
			[ cover + union closure ⇒ D ∈ τ ]

			basis(∀D: ∈ set): ; ? space
			(
				"generated a topological space from a of basis",
				⊆ set.cover(D),
				∀{B1, B2}: ∈ ℬ, ∀x: ∈ B1 ∩ B2,
				∃B: ∈ ℬ, x ∈ B ⊆ B1 ∩ B2
			),
		; end

		; about alias
			open(∀X: ∈ topological_space): = X.open, ; a class
			closed(∀X: ∈ topological_space): = X.closed,

			open_cover(∀X: ∈ topological_space): = X.open_cover(X),

			accumulation_point[∀X: ∈ topological_space]: X.accumulation_point,
			limit_point[∀X: ∈ topological_space]: = accumulation_point[X],
			closure[∀X: ∈ topological_space]: = X.closure,
			interior[∀X: ∈ topological_space]: = X.interior,
			exterior[∀X: ∈ topological_space]: = X.exterior,
			boundary[∀X: ∈ topological_space]: = X.boundary,

			continuous_map: = continuous_function,
			quotient_map: = epimorphism,

			T0_space: = Kolmogorov_space,
			T1_space: = accessible_space,
				; ! Fréchet_space: = accessible_space, ; ? this name might be confusing
			T2_space: = Hausdorff_space,
		; end

		; + about inheritance
			sub(∀S: ∈ topological_space): ; or topological_subspace
			(
				"sub topological space",
				⊆ set.sub(S),
				⊆ topological_space,
				∀A: ∈ sub(S),
				A.τ: = {U ∩ A}[∀U: ∈ X.τ] ; ?
			),
			; any subset of X is a sub of it

			×: ; + I may change the corresponding definition in group as well
			(
				∈ operator, ; ?
				∀A: ∈ topological_space, ∀B: ∈ topological_space,
				(A × B): set.= A set.× B, ; ?
				{U × V}[∀U: ∈ A.τ, ∀V: ∈ B.τ] ∈ (A × B).basis
			),

			⊆: , ; ? I don't know up to now
		; end

		; about continuity
			C(∀S: ∈ topological_space, ∀T: ∈ topological_space): = {f|f ∈ continuous_map}[f ∈ set.Hom(S, T)], ; space of continous function

			homeomorphic(∀T: ∈ topological_space):
			(
				⊆ topological_space,
				∀S: ∈ homeomorphic(T),
				∃f: C(S, T), ∃g: ∈ C(T, S),
				f ∘ g = g.id,
				g ∘ f = f.id
			),
			≌: (∈ relator, &≌&.r = homeomorphic),
			[ property```
				A ≌ B ⇔ ∀(
					∃f: ∈ homeomorphism, f.D = A, f.C = B
				)
			``` ]
		; end
		
		; about connectness
			connected_component(∀X: ∈ topological_space):
			(
				⊆ sub(X),
				⊆ connected_space,
				∀C: ∈ connected_component(X),
				∀x: ∈ X \ C, !(C ∪ {x} ∈ connected_space),
			),
		; end
		
		dense_sub(∀X: ∈ topological_space): ; ? I may write down some equivalent version for it
		(
			⊆ set.sub(X),
			∀D: ∈ dense_sub(X),
			closure[X](D) = X
		),

		covering_space(∀X: ∈ connected_space):
		(
			; * I choose the connect C,X and continuous p
			"nothing to do with cover, I think"
			⊆ connected_space,
			(
				∀C: ∈ covering_space,
				C.base_space: = X,
				C.p: ∈ topological_space.C(C, X), ; covering map (also covering projection)

				∀x: ∈ X,
				∃U: ∈ X.τ, x ∈ U, ; evenly covered neighborhood
				∀sheet: ∈ connected_component(p.preimage(U)), p.restriction[sheet] ∈ homeomorphism
			)
		),
		[ ```property
			C.p ∈ surjection
			```
			proof``` ; +
		``` ]
),