: ; topological_space, or top'space
(
	"topological space via topology (open set)",
	⊆ set, ; * I have given up my "→" version ; ! I cannot deal with some problems like Hausdorff and compact with my version now
	(
		∀X: ∈ topological_space,
		X.τ: ∈ topology(X), ; defined in the tools
			X.𝒯: = X.τ, ; I won't use this one later
			; ! X.topology: ; it may cause me confused
			X.open: = set.element(X.τ), ; just trans it to a class

		; attibutions
			; via open set
				X.basis: ; do not be confuse with the basis in tools
				(
					⊆ sub(X.τ), ; a class
					∀ℬ: ∈ X.basis,
					∀U: ∈ τ, ∃ℬ': ⊆ ℬ, U = ∪(ℬ')
					; for U = ∅, just pick ℬ' empty
				),
					X.base: = X.basis,
				
				X.subbasis:
				(
					"is a subset of basis but not a subclass of basis",
					⊆ sub(X.τ),

				)

				X.open_cover(∀A: ∈ sub(X)): ; ?
				(
					⊆ X.cover(A),
					⊆ set.sub(X.τ)
				),
			; end

			; via neighborhood
				X.nbh(∀x: ∈ X):
				(
					⊆ set.sub(X),
					∀Y: ∈ X.nbh(x),
					∃O: ∈ X.τ, x ∈ O,
					O ⊆ Y
				),
				; about alias
					X.Nbh: = X.nbh,
					X.neighborhood: = X.nbh,
				; end
			; end

			; via closed set
				X.closed: ; ?
				(
					⊆ set.sub(X),
					∀F: ∈ closed(X),
					∀x: ∈ X, (∃y: ∈ F, y X.→ x) ⇒ x ∈ F
				),
			; end

			; ! about arrow
				X.approach_to(∀x: ∈ X): ; ?
				(
					⊆ sub(X),
					(
						∀y: ∈ X.approach_to(x),
						X.nbh(x) ⊆ X.nbh(y) ; ◉.⊆
					)
				),
				X.→: = relator[X.approach_to],

				X.be_approached_to: = relation.inv(X.approach_to)
				X.→: = relator[X.be_approached_to],

				X.be_indistinguishable_with(∀x: ∈ X):
				(
					⊆ X.approach_to(x),
					⊆ X.be_approached_to(x)
				),
					X.be_topological_indistinguishable_with: = X.be_indistinguishable_with, ; ?
				X.↔: = relator[X.be_indistinguishable_with],
			; end

			; ? about closure interor and boundary
				; * be attension, the `A` below are all just subset, not subspace
				X.accumulation_point(∀A: ⊆ X):
				(
					⊆ set.element(X),
					∀x: ∈ X.accumulation_point(A),
					∀N: ∈ X.nbh(x), ¬((N \ {x}) ∩ A = ∅)
				),
					X.limit_point: = X.accumulation_point,
					X.cluster_point: = X.accumulation_point,
				
				
				X.closure_point(∀A: ⊆ X):
				(
					⊆ set.element(X),
					∀x: ∈ X.closure_point(A),
					∀N: ∈ X.nbh(x), ¬(N ∩ A = ∅)
				)
				X.closure(∀A: ⊆ X): = {∀x: ∈ X.closure_point} ; the minimal closed set in X containing the A ; or = {x|∃a: ∈ A, a X.→ x}[∀x: ∈ X], ; ?

				X.interior_point(∀A: ⊆ X):
				(
					⊆ set.element(X),
					∀x: ∈ X.interior_point(A), A ∈ X.nbh(x)
				),
				X.interior(∀A: ⊆ X): = {∀x: ∈ X.interior_point(A)}, ; the maximal open set in X contained in the A,

				X.exterior(∀A: ⊆ X): = X.interior(X \ A),

				X.boundary_point(∀A: ⊆ X):
				(
					⊆ X.closure_point(A),
					⊆ X.closure_point(X \ A)
				),
				X.boundary(∀A: ⊆ X): = X.closure(A) \ X.interior(A),
			; end
	),

	; location
		; about tools
			topology(∀X: ∈ set): ; +
			(
				"a topological structure on X",
				⊆ X.cover,
				∀τ: ∈ topology(X),
				(∅ ∈ τ),
				(∀{A, B}: ⊆ τ, A ∩ B ∈ τ),
				(∀𝒞: ⊆ τ, ∪(𝒞) ∈ τ) ; ! ∪ ; so that D ∈ τ
			),
			[ cover + union closure ⇒ D ∈ τ ]

			basis(∀D: ∈ set): ; ? space ; or base
			(
				"generated a topological space from a of basis",
				⊆ cover(D),
				∀{B1, B2}: ∈ ℬ, ∀x: ∈ B1 ∩ B2,
				∃B: ∈ ℬ, x ∈ B ⊆ B1 ∩ B2
			),
		; end

		; about alias
			; about basic
				base: = basis,

				open(∀X: ∈ topological_space): = X.open, ; a class
				closed(∀X: ∈ topological_space): = X.closed,

				open_cover(∀X: ∈ topological_space): = X.open_cover(X),

				accumulation_point[∀X: ∈ topological_space]: X.accumulation_point,
				limit_point[∀X: ∈ topological_space]: = X.accumulation_point,

				closure_point[∀X: ∈ topological_space]: = X.closure_point,
					closure[∀X: ∈ topological_space]: = X.closure,
				interior_point[∀X: ∈ topological_space]: = X.interior_point,
					interior[∀X: ∈ topological_space]: = X.interior,
				exterior_point[∀X: ∈ topological_space]: = X.exterior_point,
					exterior[∀X: ∈ topological_space]: = X.exterior,
				boundary_point[∀X: ∈ topological_space]: = X.boundary_point,
					boundary[∀X: ∈ topological_space]: = X.boundary,
			; end

			; about function and morphism
				continuous_map: = continuous_function,
				quotient_map: = epimorphism,
			; end

			; about separable axiom
				T0_space: = Kolmogorov_space,
				T1_space: = accessible_space,
					; ! Fréchet_space: = accessible_space, ; ? this name might be confusing
				T2_space: = Hausdorff_space,
			; end

			; about connectness
				connected_component: = connected_space.component
			; end
		; end

		; + about inheritance
			sub(∀S: ∈ topological_space): ; or topological_subspace
			(
				"sub topological space",
				⊆ set.sub(S),
				⊆ topological_space,
				∀A: ∈ sub(S),
				A.τ: = {U ∩ A}[∀U: ∈ X.τ] ; ?
			),
			; any subset of X is a sub of it

			×: ; + I may change the corresponding definition in group as well
			(
				∈ operator, ; !
				∀A: ∈ topological_space, ∀B: ∈ topological_space,
				(A × B): set.= A set.× B, ; ?
				{U × V}[∀U: ∈ A.τ, ∀V: ∈ B.τ] ∈ (A × B).basis
			),

			⊆: , ; ? I don't know up to now

			quotient(∀X: ∈ topological_space): ; or identification_space
			(
				⊆ set.quotient(X),
				⊆ topological_space,
				∀Q: ∈ quotient,
				Q.τ = {U|∪(U) ∈ X.τ}[∀U: ∈ Q] ; ? ∪
			),

			isomorphic(∀X: ∈ topological_space): ; ?
			(
				⊆ topological_space,
				∀T: ∈ isomorphic(X),
				∃f: ∈ isomorphism, ∀(f.D = X, f.C = T)
			),
			≌: = relator[isomorphic],
		; end
				
		; about continuity
			C(∀S: ∈ topological_space, ∀T: ∈ topological_space): = {f|f ∈ continuous_map}[f ∈ set.Hom(S, T)], ; space of continous function

			homeomorphic(∀T: ∈ topological_space):
			(
				⊆ topological_space,
				∀S: ∈ homeomorphic(T),
				∃f: ∈ homeomorphism, f.D = S, f.C = T
				[ while, homeomorphism = isomorphism ]
			),
		; end

		; about special subspace
			; for intrinsic
				connected_sub(∀X: ∈ topological_space):
				(
					⊆ set.sub(X),
					⊆ connected_space,
				),

				compact_sub(∀X: ∈ topological_space):
				(
					⊆ set.sub(X),
					⊆ compact_space
				),
			; end

			; for extrinsic
				dense_sub(∀X: ∈ topological_space): ; ? I may write down some equivalent version for it
				(
					⊆ set.sub(X),
					∀D: ∈ dense_sub(X),
					X.closure(D) = X
				),
			; end
		; end

		; about covering space
			evenly_covered(∀p: ∈ continuous_function):
			(
				"evenly covered over p",
				⊆ connected_sub(p.C), ; may not be open ; ? connected as I want to use the connected component to simplify the definition
				(
					∀U: ∈ evenly_covered(p),
					∀sheet: ∈ connected_component(p.preimage(U)), ; the preimage may be empty
					p.restriction[sheet][U] ∈ homeomorphism
				)
			),

			covering_space(∀X: ∈ connected_space): ; ? whether should I preserve the X here
			(
				; Source from "Allen Hatcher - Algebraic Topology"
				; the connected space X makes the index a constant
				⊆ topological_space, ; allow disconnected space
				(
					∀C: ∈ covering_space(X),
					; C.base_space: = X, ; I think it useless
					C.p: ∈ topological_space.C(C, X), ; covering map (also covering projection), may not be surjective ; ! X should be temporary
					∀x: ∈ X,  ∃U: ∈ X.nbh(x), U ∈ evenly_covered(p)
				),
				; location
					isomorphism:
					(
						⊆ homeomorphism, ; topological_space.isomorphism
						∀f: ∈ isomorphism,
						@f,
							D.p = C.p ∘ f ; D → C → X
						■
					),
					automorphism:
					(
						⊆ isomorphism,
						⊆ set.endomorphism
					),
					; about alias
						deck_transformation: = automorphism, ; !
						covering_transformation: = automorphism,
					; end
					Aut(∀C: ∈ covering_space): = {f|f ∈ automorphism}[∀f: ∈ toplogical_space.C(C, C)],
			),
			; covering_space(X).isomorphism

			universal_covering_space(∀X: ∈ connected_space): ; ? X may need to be path-connected and locally path-connected
			(
				⊆ covering_space(X),
				⊆ simple_connected_space ; +
			),
			[  universal covering space of X is the covring space of all the covering space of X ]
		; end
),