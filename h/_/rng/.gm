: ; rng, the ring without multiplication identity
(
	"an abelian group on +, and a semigroup on ×",
	; * This will be a template of all the rng-like structres, like commutative_rng, ring and field
	∈ structure.sub(abelian_group), ; "+,-" is defined here
	(
		∀R: ∈ rng,
		R.multiply: ∈ associative_operation,
		R ∈ R.multiply.closure,

		R.right_multiply: = R.multiply,
			R.r'multiply: = R.right_multiply,
		R.left_multiply: = R.multiply.dual,
			R.l'multiply: = R.left_multiply,

		R.×: = operator[R.multiply],

		; distributive law ; ? I think here can be simpler
		∀{a, b, c}: ⊆ R,
		(a R.+ b) R.× c = (a R.× c) R.+ (b R.× c),
		a R.× (b R.+ c) = (a R.× b) R.+ (a R.× c),

		; attributes
			R.power[ℕ.0](∀a: ∈ R): = R.1,
			R.power[∀n: ∈ ℕ\{ℕ.0}](∀a: ∈ R): = R.power[n ℕ.- N.1] R.× a, ; ! recursion
			
			R.^: ; power
			(
				; + tag: delimiter
				∈ keyword(r"\$R\  \*^ \*\$ℕ\ \/\$power\ [\2](\1)"p), ; ! keyword
			),

			; we cannot define 
			; ! R.algebra:
			; ! R.module:
			; here as it will be confused with the later definition

	),
	[ hierarchy chain: rng ⊆ abelian_group ]

	; location
		; about alias
			regular_module: = module,
			l'module: = module,
			left_module: = l'module,
			; + r'module: = anti_module,
			; + right_module: = r'module,

			ker(∀f: ∈ homomorphism): = f.kernel,
		; end

		; + about inheritance
			sub(∀R: ∈ rng):
			(
				⊆ rng,
				⊆ group.sub(R), ; just the abelian_group.sub

				∀H: ∈ sub(R),
				H.multiply = G.multiply,
			),

			min_sub[∀G: ∈ rng](∀S: ⊆ G): = ∩[∀H: ∈ sub(G), S ⊆ H](H), ; ! it is just the generating
		; end

		char(∀R: ∈ rng): = max[∀r: ∈ R](group.order(r)), ; ? max
		; characteristic of a ring is the maximal order of all the elements in R

		ideal(∀R: ∈ rng): ; be consistent with the semigroup
		(
			"ideal subrng, two-side"
			⊆ sub(R), ; ? too strong
			∀I: ∈ ideal(R),
			∀x: ∈ I, ∀r: ∈ R, x R.× r ∈ I, r R.× x ∈ I ; ?
		),

		I[∀R: ∈ ring](∀τ: ⊆ R): = ∩[∀D: ∈ ideal(R)]() ; !
		; (
		; 	"idealizer, the mimimal ideal contains τ",
		; 	∈ ideal(R),

		; 	τ ⊆ I[R](τ) ; generators
		; ),

		l'principle_ideal(∀R: ∈ rng):
		(
			"left principle ideal",
			⊆ ideal(R),
			∀P: ∈ l'principle_ideal(R),
			∃x: ∈ R, ; may not in P
			P = {r R.× x}[∀r: ∈ R]
		),
		left_principle_ideal: = l'principle_ideal,

		r'principle_ideal(∀R: ∈ rng):
		(
			"right principle ideal",
			⊆ ideal(R),
			∀P: ∈ r'principle_ideal(R),
			∃x: ∈ R, ; may not in P
			P = {r R.× x}[∀r: ∈ R]
		),
		right_principle_ideal: = r'principle_ideal,

		maximal_ideal(∀R: ∈ rng):
		(
			⊆ ideal(R),
			∀M: ∈ maximal_ideal(R),
			¬(M = R),
			∀I: ∈ ideal(R),
			M ⊆ I ⇒ ∃(I = R, I = M)
		),

		prime_ideal(∀R: ∈ rng):
		(
			⊆ ideal(R),
			∀P: ∈ prime_ideal(R),
			∀{a, b}: ⊆ R,
			a R.× b ∈ P ⇒ ∃(a ∈ P, b ∈ P)
		),

		proper_ideal(∀R: ∈ rng):
		(
			⊆ ideal(R),
			∀P: ∈ proper_ideal(R),
			¬(P = R)
		),

		radical[∀R: ∈ rng](∀I: ∈ ideal(R)): = {r | ∃n: ∈ ℕ, r R.^ n ∈ I}[∀a: ∈ R]
		; ∨(I), looks like sqrt of I, but not only the square case

		nilradical(∀R: ∈ rng): = radical[R]({R.0}),
),
