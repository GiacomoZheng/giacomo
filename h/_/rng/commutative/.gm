: ; commutative, or commutative_rng
(
	∈ structure.full_sub(rng),
	(
		∀R: ∈ rng.commutative,
		∀{a, b}: ⊆ R,
		a R.× b = b R.× a ; commutativity
	),

	; location
		; about inheritance
			nil(∀R: ∈ rng.commutative): = rng.nil(R),

			principle_ideal(∀R: ∈ rng.commutative): = rng.l'principle_ideal(R), ; as commutative

			proper_ideal(∀R: ∈ rng.commutative): = rng.proper_ideal(R),
		; end

		prime_element(∀R: ∈ rng.commutative):
		(
			"prime elements: p | ab then p | a or p |b",
			⊆ set.element(R),
			∀p: ∈ prime_element(R),
			¬(p ∈ unit(R)), ; ?
			@R,
				∀{a, b}: ∈ R,
				p ∈ divisor[R](a × b) ⇒ ∀(p ∈ divisor[R](a), p ∈ divisor[R](b))
			■
		),

		divisor[∀R: ∈ rng.commutative](∀a: ∈ R):
		(
			⊆ set.element(R),
			[ 0 can never be a divisor ]
			∀b: ∈ divisor[R](a),
			∃c: ∈ R, c R.× b = a
		),
		factor[∀R: ∈ rng.commutative]: = divisor[R],

		common_divisor[∀R: ∈ rng.commutative](∀S: ⊆ R\{R.0}):
		(
			⊆ set.element(R),
			; specially, if S is empty, return the set.element(R),
			∀c: ∈ common_divisor[R](S),
			∀x: ∈ S, c ∈ divisor[R](x)
		),
		common_factor[∀R: ∈ rng.commutative]: = common_divisor[R],

		gcd[∀R: ∈ rng.commutative](∀S: ⊆ R\{R.0}): ; +
		(

		),

		multiple[∀R: ∈ rng.commutative](∀a: ∈ R):
		(
			⊆ set.element(R),
			∀b: ∈ multiple[R](a),
			∃c: ∈ R, b = c R.× a
			[ here, 0 is a multiple of every elements and every every element is the multiple of itself ]
		),

		zero_divisor(∀R: ∈ rng.commutative): ; ? includes 0
		(
			; ? may move it to rng
			"divisor of 0, someone else may restrict it not 0",
			= divisor[R](R.0)
		),

		; as the l' and r' principle ideal is the same in a commutative rng
),
