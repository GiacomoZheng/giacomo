: ; group
(
	⊆ monoid, ; semigroup with identity

	(
		[ axioms ]
		∀G: ∈ group,
		∃x': ∈ G, x' G.* x = x G.* x' = G.e, ; inverse
		[ method ]
		; ! I won't define G.^ as it will be confused with it in ring
		; ! I won't define G./ as it will be confused with it in commutative_ring
	),
	[ chaim: group ⊆ monoid ⊆ semigroup ⊆ magma ]

	; the "group" above is just a location for the ones below
		; about alias
			ker(∀f: ∈ homomorphism): = f.kernel,

			periodic_group: = torsion_group,
			regular_action: = action,
			l'action: = action,
			left_action: = l'action,
			r'action: = anti_action,
			right_action: = r'action,
		; end

		; + about inheritance
			sub(∀G: ∈ group): ; different from other books
			(
				⊆ set.sub(G),
				⊆ group,

				∀H: ∈ sub(G),
				H.e = G.e,
				&H.*& = &G.*&
			),

			×:
			(
				"product space: the result of it is indeed a group",
				∈ operator,
				∀A: ∈ group, ∀B: ∈ group,
				(A × B) set.= A set.× B,
				(A × B).*:
				(
					∀{(x1, y1), (x2, y2)}: ⊆ A × B,
					(x1, y1) (A × B).* (x2, y2) = (x1 A.* x2, y1 A.* y2)
				)
			),

			; ! min_sub[∀G: ∈ group](∀S: ⊆ G): = ∩[∀H: ∈ sub(G), S ⊆ H](H), ; ! it is just the generating ; * hhhh

		; end
		Hom(∀G: ∈ group, ∀H: ∈ group): = {f|f.D = G, f.C = H}[∀f: ∈ homomorphism], ; ?

		inv[∀G: ∈ group](∀g: ∈ G):
		(
			[ valid because the unqeness of the inverse in the group  ]
			@G,
			∃g': ∈ G, g' * g = g * g' = e,
			= g'
			■
		),

		order[∀G: ∈ group](∀x: ∈ G):
		(
			"it is the cardinal of the smallest subgroup of G with x  in it, generally speaking"
			D: = {m}[∀m: ∈ N, G.e (G.* x)^m = G.e]
			!(D = ∅) ⇒ = inf(D) ; the domian of inf function do not contains ∅. If so, the error will occur; ! I may change the inf function later
			; + otherwise return the cardinal of Z
		),

		generator(∀G: ∈ cyclic_group):
		(
			⊆ set.element(G),
			∀g: ∈ generator(G),
			G = {G.e (G.* g)^n}[∀n: ∈ ℤ]
		),

		C[∀G: ∈ group](∀A: ⊆ G): = {g|∀a: ∈ A, a G.* g = g G.* a}[∀g: ∈ G], ; centralizer

		Z(∀G: ∈ group): = C[G](G), ; center

		N[∀G: ∈ group](∀A: ⊆ G): = {g|∀a: ∈ A, g G.* a G.* inv[G](g) ∈ A}[∀g: ∈ G], ; normalizer

		conj[∀G: ∈ group](∀a: ∈ G): = {g G.* a G.* inv[G](g)}[∀g: ∈ G], ; if b ∈ conj(a), we can say that a and b is conjugate

		commutator_sub(∀G: ∈ group): = min_sub[G]({a G.* b G.* inv[G](a) G.* inv[G](b)}[∀{a, b}: ⊆ G]), ; ? Commutator subgroup, or derived subgroup
		[ commutator_sub(G) ∈ normal(G) ]

		l'coset[∀G: ∈ group](∀H: ∈ sub(G)): ; I don't write it as an attribute as it should not be inherited
		(
			⊆ set,

			∀C: ∈ l'coset[G](H),
			∃g: ∈ G, C = {g G.* h}[∀h: ∈ H] ; Order
		),
		/["l"]:
		(
			∈ operator,
			∀G: ∈ group, ∀H: ∈ sub(G),
			G /["l"] H = {∀x: ∈ l'coset[G](H)}
		),

		r'coset[∀G: ∈ group](∀H: ∈ sub(G)):
		(
			⊆ set,

			∀C: ∈ r'coset[G](H),
			∃g: ∈ G, C = {h G.* g}[∀h: ∈ H] ; Order
		),
		/["r"]:
		(
			∈ operator,
			∀G: ∈ group, ∀H: ∈ sub(G),
			G /["r"] H = {∀x: ∈ r'coset[G](H)}
		),

		normal(∀G: ∈ group):
		(
			⊆ sub(G),
			∀N: ∈ normal(G),
			∀h: ∈ N, ∀g: ∈ G,
			@G,
				g*h*inv[G](g) ∈ N
			■
		),
		/:
		(
			∈ operator,
			∀G: ∈ group, ∀H: ∈ normal(G),
			G / H = G /["l"] H ; in fact, here /[l] and /[r] has the same result
		),

		isomorphic(∀G: ∈ group):
		(
			⊆ group,
			∀H: ∈ isomorphic(G),
			∃f: ∈ isomorphism, ∀(f.D = G, f.C = H)
		),
		≌: (∈ relator, &≌&.r = isomorphic),
		[ ≌ is an equivalent relator ]
),
