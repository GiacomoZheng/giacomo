: ; abelian_group
(
	⊆ group,
	(
		∀G: ∈ abelian_group,
		&G.*& ∈ commutative_operator, G ⊆ &G.*&.D,

		G.+: = &G.*&, ; for convince
		G.0: = G.e, ; for convince

		[ attributes ]
			G.-:
			(
				∈ operator, ; !
				∀{a, b}: ⊆ G,
				a G.- b = a G.+ group.inv[G](b) ; = group.inv[G](b) G.+ a
				; that is why the - can be defined here
			),

			G.coset(∀H: ∈ sub(G)): = group.l'coset[G](H), ; with the form {g + H}
	),

	; abut inheritance
		sub(∀G: ∈ abelian_group): = group.sub(G),

		inv[∀R: ∈ abelian_group](∀a: ∈ R): = group.inv[R](a),
		neg[∀R: ∈ abelian_group](∀a: ∈ R): = group.inv[R](a),

		Hom(∀G: ∈ abelian_group, ∀H: ∈ abelian_group): = {f|f ∈ homomorphism}[∀f: ∈ group.Hom(G, H)], ; = ... ∈ set.Hom ... ; + a monoid
		; coset
	; end
),
[ hierarchy chain: abelian group ⊆ group ]
