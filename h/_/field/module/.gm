: ; module, or vector_space
(
	"field module",
	∈ structure.full_sub(commutative_ring.module), ; "+" defined there
	(
		∀V: ∈ module,
		V.F: = V.R,
		V.F ∈ field,
		V.π ∈ action, ; here it is the field action
		; attributes
			V.combination(∀S: ⊆ V):
			(
				⊆ set.sub(V),
				∀x: ∈ combination[V](S),
				∃S': ∈ set.finite_sub(S),
				∃c[∀α: ∈ S']: ∈ V.F,
				x = V.+[∀α: ∈ S'](V.π(c[α])(α)) ; means it is the elements of V
				; i.e. x = c1 α1 + c2 α2 + ... + cn αn
			),

			V.span(∀S: ⊆ V): = combination[V](S).collected, ; + collectible

			V.independent: ; ?
			(
				"independent subset of this vector space",
				⊆ set.sub(V),
				∀I: ∈ V.independent,
				∃I': ∈ set.finite_sub(I),
				∀c[∀α: ∈ I']: ∈ V.F,
				@V,
					+[∀α: ∈ I'](π(c[α])(α)) = 0 ⇒ (∀α: ∈ I', c[α] = F.0) ; ? as an abelian group, order of addition is unimportant
				■
			),

			V.spanning_set:
			(
				⊆ set.sub(V),
				∀S: ∈ V.spanning_set,
				V.span(S) = V
			),

			V.basis:
			(
				⊆ V.independent,
				⊆ V.spanning_set
			),

			V.dimension: ; +
			(

			),

			; ! only for a finite dimensional vector space
			V.coordinate[∀ℬ: ∈ V.basis](∀x: ∈ V):
			; be similar to the actions
			(
				; an isomorphism to 
				∃f(∀b: ∈ ℬ): ∈ V.F, x = +[∀b: ∈ ℬ]( V.π[f(b)](b) ), ; + f is unique
				= f
			),

			V.dual_space: = Hom(V, V.F),
			V.dual: = V.dual_space,

			V.annnihilator(∀S: ⊆ V): = {f|∀s: ∈ S, f(s) = V.F.0}[∀f: ∈ V.dual_space],
			V.ann: = V.annnihilator,

			; about representation
				; may be Group.representation
			; end
	),
		; about alias
			ker(∀f: ∈ homomorphism): = f.kernel,
			Adj(∀f: ∈ homomorphism): = f.adjoint,
			trans(∀f: ∈ homomorphism): = f.adjoint,

			independent(∀V: ∈ module): = V.independent,
			combination[∀V: ∈ module]: = V.combination,
			span[∀V: ∈ module]: = V.span,
			spanning_set(V): = V.spanning_set,
			dim(∀V: ∈ module): = V.dimension,
			dual(∀V: ∈ module): = V.dual_space,
			Ann[∀V: ∈ module]: = V.annnihilator,
		; end

		; + about inheritance
			sub(∀V: ∈ module):
			(
				⊆ ring.module.sub(V), ; +
				⊆ module,
				∀S: ∈ sub(V),
				V.F = S.F,
				V.multiply = S.multiply
			),

			; Hom(∀V: ∈ module, ∀W: ∈ module), ; moved to the structure
			; it is also a vector space

			min_sub[∀G: ∈ module](∀S: ⊆ G): = ∩[∀H: ∈ sub(G), S ⊆ H](H), ; ! ; ? maybe I'll change it to closure


			; replaced by space
			; isomorphic(∀V: ∈ module): ; ?
			; (
			; 	⊆ module,
			; 	∀X: ∈ isomorphic(V),
			; 	∃f: ∈ isomorphism, ∀(f.D = V, f.C = X)
			; ),
			; ≌: = relator[isomorphic],
		; end

		rank(∀T: ∈ homomorphism): = dim[T.C](range(T)),

		nullity(∀T: ∈ homomorphism): = dim[T.D](ker(T)),

		eigen_value(∀T: ∈ endomorphism): ; +
		(
			"eigen value of "
		),
		eigenvalue: = eigen_value,
		e'value: = eigen_value,

		det(∀T: ∈ endomorphism): , ; +

		; characteristic_polynomial(∀T: ∈ endomorphism): = det
),
