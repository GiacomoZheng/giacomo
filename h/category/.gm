: ; + category
(
	⊆ ◉, ; a category of `A` is something represent some property of `A` (which might be a structure)
	(
		∀𝒞: ∈ category,
		𝒞.object: ⊆ ◉,
		𝒞.morphism: ; ! I think there is some ambiguity here
		(
			; here means I can pick sth as the `𝒞.morphism`
			⊆ ◉,
			(
				∀f: ∈ 𝒞.morphism,
				f.source: ∈ 𝒞.object, f.target: ∈ 𝒞.object,
				; ! I need to define the equality of it, which should not be allowed
			),
			; locations
				from[∀A: ∈ object]:
				(
					⊆ 𝒞.morphism,
					∀f: ∈ from[A], f.source = A
				),
				to[∀B: ∈ object]:
				(
					⊆ 𝒞.morphism,
					∀f: ∈ to[B], f.target = B
				),
				from[∀A: ∈ object]to[∀B: ∈ object]:
				(
					⊆ from[A],
					⊆ to[B]
				),
		),
		𝒞.morphism[∀A: ∈ 𝒞.object][∀B: ∈ 𝒞.object]: = 𝒞.morphism.from[A]to[B],

		𝒞.composition(∀g: ∈ 𝒞.morphism)(∀f: ∈ 𝒞.morphism.from[g.target]): ∈ 𝒞.morphism.from[g.source]to[f.target], ; f ∘ g
		[ it is to say```
			∀A: ∈ object, ∀B: ∈ object, ∀C: ∈ object,
			∀g: ∈ morphism[A][B], ∀f: ∈ morphism[B][C],
			∃h: ∈ morphism[A][C], composition(g)(f) morphism.= h ; f ∘ g = h
		``` ]

		𝒞.∘: = operator[𝒞.composition], ; + operator for this case

		(@𝒞,
			∀A: ∈ object, ∀B: ∈ object, ∀C: ∈ object, ∀D: ∈ object,
			∀h: ∈ morphism[A][B], ∀g: ∈ morphism[B][C], ∀f: ∈ morphism[C][D],
			(f ∘ g) ∘ h morphism.= f ∘ (g ∘ h)
		■),; associativity

		𝒞.identity_morphism[∀A: ∈ 𝒞.object]: ∈ 𝒞.morphism.from[A]to[A],

		(@𝒞,
			∀A: ∈ object, ∀B: ∈ object,
			(
				∀f: ∈ morphism.from[A], f ∘ 𝒞.identity_morphism[A] morphism.= f
			),
			(
				∀g: ∈ morphism.to[A], 𝒞.identity_morphism[A] ∘ g morphism.= g
			),
		■), ; criterion about identity_morphism
	),
	; location
		; about tools
		; end
),

[ I'll delete the below parts```
(
	; location
		filtered_index: ; + or filtered_index_category
		(
			⊆ category,
			∀c: ∈ filtered_index,
			∀X: ∈ c, ∀Y: ∈ c, ∃Z: ∈ c,
			c.morphism[X][Z] ∈ class.nonempty, ; X → Z
			c.morphism[Y][Z] ∈ class.nonempty, ; Y → Z
			; and 
			∀f: ∈ c.morphism[X][Y], ∀g: ∈ c.morphism[X][Y], ; may be ∀{f, g}: ⊆ c.Mor(X)(Y)
			∃h: ∈ c.morphism[Y][Z],
			h ∘ f c.morphism.= h ∘ g ; ? =
		),
		; + 1.4.D. EXECRISE
),
```]

[ save a diagram:
			f
		D	-->	C
		|		| 
	D.oper(x)	C.oper(x)
		∨		∨
		D	-->	C 
			f
]