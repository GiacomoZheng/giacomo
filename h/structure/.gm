: ; structure, 
(
	"a category (class) with isomorphism defined",
	; it seems that a morphism in category don't need to be a homomorphism
	⊆ category,
	(
		∀s: ∈ structure, ; s ⊆ set
		s.homomorphism: ⊆ s.morphism,

		s.isomorphic ∈ relation.equivalent, ; ?
		∀X: ∈ s, s.identity = s.isomorphism, ; ! ; ?
		; attributes
			; about morphism
				s.epimorphism:
				(
					⊆ s.homomorphism,
					⊆ set.epimorphism
				),

				s.monomorphism:
				(
					⊆ s.homomorphism,
					⊆ set.monomorphism
				),

				s.endomorphism:
				(
					⊆ s.homomorphism,
					⊆ set.endomorphism
				),

				s.isomorphism:
				(
					⊆ s.homomorphism,
					⊆ set.isomorphism
				),
				s.isomorphic(∀X: ∈ s):
				(
					⊆ labeled_graph,
					∀Y: ∈ s.isomorphic(X),
					∃f: ∈ s.isomorphism, ∀(f.D = V, f.C = X)
				),
				
				s.≌: = relator[isomorphic],

				s.automorphism:
				(
					⊆ s.homomorphism,
					⊆ set.automorphism
				),
				[ property:
					A ∈ s, the identity map on A is always an automorphism
				]

				; ? about set of morphism
					s.Hom(∀X: ∈ s)(∀Y: ∈ s): set.= {f|f ∈ s.homomorphism}[∀f: ∈ set.Hom(X)(Y)],

					s.Epi(∀X: ∈ s)(∀Y: ∈ s): set.= {f|f ∈ s.epimorphism}[∀f: ∈ set.Epi(X)(Y)],
					; s.Mon(∀X: ∈ s)(∀Y: ∈ s): set.= {f|f ∈ s.monomorphism}[∀f: ∈ set.Hom(X, Y)],
					s.End(∀X: ∈ s): set.= {f|f ∈ s.endomorphism}[∀f: ∈ set.End(X)],
					; s.Iso(∀X: ∈ s)(∀Y: ∈ s): set.= {f|f ∈ s.endomorphism}[∀f: ∈ set.Iso(X, Y)],
					s.Aut(∀X: ∈ s): set.= {f|f ∈ s.automorphism}[∀f: ∈ set.Aut(X)],
				; end

				s.induced_homorphism(∀t: ∈ sub(s)): ; ?
				(
					⊆ s.homomorphism,
					∀f: ∈ s.induced_homorphism,
					f.D ∈ t, f.C ∈ t
				),
			; end

			; about inherence
				s.sub(∀X: ∈ s):
				(
					⊆ set.sub(X),
					⊆ s,
				),
			; end
	),

	; location
		sub(∀x: ∈ structure): ; or substructure, ; ! or subcategory
		(
			⊆ class.sub(x),
			∀y: ∈ sub(x),
			y.homomorphism ⊆ x.homomorphism,
			; by category theory, it is subcategory
			; y.Hom(A, B) ⊆ x.Hom(A, B)
		),
		
		full_sub(∀x: ∈ structure): ; or substructure, ; ! or subcategory
		(
			⊆ sub(x),
			∀y: ∈ full_sub(x),
			y.homomorphism class.= x.induced_homorphism(y),
			; ; by category theory, it is subcategory
			; ∀A: ∈ y, ∀B: ∈ y,
			; y.Hom(A, B) = x.Hom(A, B),
		),
		[ example:```
			field ∈ structure.full_sub(ring),
			field.homomorphism:
			(
				⊆ ring.homomorphism,

				∀f: ∈ homomorphism,
				f.D ∈ field, f.C ∈ field
			),
		``` ]

		singleton: ; or singleton_structure
		(
			; ?
			⊆ class.singleton,
			⊆ structure,
		),

		universal: ; or universal_structure ; originate from the universal property.
		(
			; ?
			"instances unique up to isomorphism, also, every space defined by universal property is a universal structure"
			⊆ structure,

			∀s: ∈ universal, 
			∀X: ∈ s, ∀Y: ∈ s,

			X ∈ s.isomorphic(Y)
		),
			unique_up_to_isomorphism: = universal, ; ? I don;t like this name indeed
			uni-iso: = universal, ; * Mario's suggestion
		[ properties:
			* a (structure-) singleton is always unique_up_to_isomorphism
		]


),