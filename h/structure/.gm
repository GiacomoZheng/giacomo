: ; structure, 
(
	; * I'll define the category from a totally different perspective
	⊆ class,
	(
		∀s: ∈ structure,; `s` is a `structure`

		s ⊆ set, ; a `s` is a `set`
		
		; s.object: = s, ; ! objects
		; s.morphism: ; !
		; s.homomorphism: ⊆ s.morphism, ; !
		s.homomorphism: ⊆ set.homomorphism,

		s.isomorphic ∈ relation.equivalent, ; ?
		s.identity_morphism ⊆ s.automorphism, ; ?
		
		; attributes
			; about morphisms
				s.identity_morphism[∀S: ∈ s]: (∈ s.identity_morphism, s.identity_morphism[S].D = S), ; ?

				s.epimorphism:
				(
					⊆ s.homomorphism,
					⊆ set.epimorphism
				),

				s.monomorphism:
				(
					⊆ s.homomorphism,
					⊆ set.monomorphism
				),

				s.endomorphism:
				(
					⊆ s.homomorphism,
					⊆ set.endomorphism
				),

				s.isomorphism:
				(
					⊆ s.homomorphism,
					⊆ set.isomorphism
				),
				s.isomorphic(∀X: ∈ s):
				(
					⊆ s,
					∀Y: ∈ s.isomorphic(X),
					∃f: ∈ s.isomorphism, ∀(f.D = X, f.C = Y)
				),
				
				s.≌: = relator[s.isomorphic],

				s.automorphism:
				(
					⊆ s.homomorphism,
					⊆ set.automorphism
				),
				[ property:
					A ∈ s, the identity morphism on A is always an automorphism
				]

				; ? about set of morphism
					s.Hom(∀X: ∈ s)(∀Y: ∈ s): set.= {f|f ∈ s.homomorphism}[∀f: ∈ set.Hom(X)(Y)],

					s.Epi(∀X: ∈ s)(∀Y: ∈ s): set.= {f|f ∈ s.epimorphism}[∀f: ∈ set.Epi(X)(Y)],
					; s.Mon(∀X: ∈ s)(∀Y: ∈ s): set.= {f|f ∈ s.monomorphism}[∀f: ∈ set.Hom(X, Y)],
					s.End(∀X: ∈ s): set.= {f|f ∈ s.endomorphism}[∀f: ∈ set.End(X)],
					; s.Iso(∀X: ∈ s)(∀Y: ∈ s): set.= {f|f ∈ s.endomorphism}[∀f: ∈ set.Iso(X, Y)],
					s.Aut(∀X: ∈ s): set.= {f|f ∈ s.automorphism}[∀f: ∈ set.Aut(X)],
				; end

				s.induced_homorphism(∀t: ∈ sub(s)): ; ?
				(
					"change the domain from t to s; Hom_t(X, Y) = Hom_s(X, Y) in category theory",
					⊆ s.homomorphism,
					∀f: ∈ s.induced_homorphism,
					f.D ∈ t, f.C ∈ t
				),
			; end

			; ? about sub and quotient
				s.sub(∀X: ∈ s): ; + it should be the same for full substructure
				(
					∈ full_sub(s), ; it is a full substructure of s, which means has the same homomorphism
					⊆ set.sub(X),
				),

				s.quotient(∀X: ∈ s):
				(
					∈ full_sub(s),
					⊆ set.quotient(X), ; +
				)
			; end

			; about universal
				s.initial:
				(
					"the class of initial objects of s, there is a unique morphism \"to\" to any objets",
					∈ full_sub(s),
					∀X: ∈ s.initial, ∀Y: ∈ s,
					s.homomorphism[X][Y] ∈ class.singleton ; ? at_most_singleton
				),
					s.initial_object: = s.initial,
				s.final:
				(
					"the class of final objects of s, there is a unique morphism \"from\" to any objets",
					∈ full_sub(s),
					∀X: ∈ s.initial, ∀Y: ∈ s,
					s.homomorphism[Y][X] ∈ class.singleton ; ? at_most_singleton
				),
					s.final_object: = s.final,
				[ property, ```
					s.initial ∈ universal,
					s.final ∈ universal,
				```]
			; end
	),

	; location
		; about substructure
			sub(∀x: ∈ structure): ; or substructure
			(
				⊆ class.sub(x),
				∀y: ∈ sub(x),
				y.homomorphism ⊆ x.homomorphism,
				; in category theory, it is subcategory
			),
			
			full_sub(∀x: ∈ structure): ; or substructure
			(
				⊆ sub(x),
				∀y: ∈ full_sub(x),
				y.homomorphism class.= x.induced_homorphism(y),
				; in category theory, it is full subcategory
			),
			[ example:```
				group ∈ structure.full_sub(abelian_group),
				field ∈ structure.full_sub(ring),
			``` counterexample:```
				¬(rng ∈ structure.full_sub(abelian_group)), ; we add an ×
				¬(ring ∈ structure.full_sub(rng)), ; we add an 1
			```]

			half-full_sub(∀x: ∈ structure):
			(
				; Source: M. Kashiwara and P. Schapira, Categories and Sheaves: Definition 1.3.17
				⊆ sub(x),
				∀y: ∈ half-full_sub(x),
				∀A: ∈ y, ∀B: ∈ y,
				A x.≌ B ⇒ A y.≌ B
			),
				half_full_sub: = half-full_sub,
			[ property:
				* on the other hand, we have `A y.≌ B ⇒ A x.≌ B` for y ∈ sub(x) with the same y isomorphism
				* full_substrutures are always half-full
			example: ```
				cyclic_group ∈ structure.half-full_sub(set),
				¬(cyclic_group ∈ structure.full_sub(set)),
			```]

			saturated_sub(∀x: ∈ structure):
			(
				⊆ full_sub(x),
				∀y: ∈ saturated_sub(x),
				∀X: ∈ x,
				(∃Y: ∈ y, X x.≌ Y) ⇒ X ∈ y
			),
			[example: most of full substructures we defined are still saturated substructures,
				counterexample: the struture of all the subgroup of G is an full substruture of group but not an saturated substructure ```
				∀G: ∈ group,
				group.sub(G) ∈ structure.full_sub(group),
				¬(group.sub(G) ∈ structure.saturated_sub(group)),
			```]
		; end

		; + about universal structure
			singleton: ; or singleton_structure
			(
				; ?
				⊆ class.singleton,
				⊆ structure,
			),

			universal: ; or universal_structure
			(
				; originate from the universal property.
				"instances/objects (may not exist) unique up to isomorphism, also, every space defined by universal property is a universal structure"
				⊆ structure,

				∀s: ∈ universal, 
				∀X: ∈ s, ∀Y: ∈ s,

				X s.≌ Y
			),
				unique_up_to_isomorphism: = universal, ; ? I don't like this name indeed
				uni-iso: = universal, ; * Mario's suggestion
			[ properties:
				* a (structure-) singleton is always unique_up_to_isomorphism
			]
		; end

),