: ; structure
(
	"a class with isomorphism"
	⊆ class,
	(
		∀s: ∈ structure,
		s ⊆ set,
		s.isomorphic ∈ relation.equivalent,
		; attributes
			; about morphism
				s.homomorphism:
				(
					⊆ set.homomorphism,
					∀f: ∈ s.homomorphism,
					f.D: ∈ s, f.C: ∈ s
				),

				s.epimorphism:
				(
					⊆ s.homomorphism,
					⊆ set.epimorphism
				),

				s.monomorphism:
				(
					⊆ s.homomorphism,
					⊆ set.monomorphism
				),

				s.endomorphism:
				(
					⊆ s.homomorphism,
					⊆ set.endomorphism
				),

				s.isomorphism:
				(
					⊆ s.homomorphism,
					⊆ set.isomorphism
				),
				s.isomorphic(∀X: ∈ s):
				(
					⊆ labeled_graph,
					∀Y: ∈ s.isomorphic(X),
					∃f: ∈ s.isomorphism, ∀(f.D = V, f.C = X)
				),
				
				s.≌: = relator[isomorphic],

				s.automorphism:
				(
					⊆ s.homomorphism,
					⊆ set.automorphism
				),
				[ property:
					A ∈ s, the identity map on A is always an automorphism
				]

				; about set of morphism
					s.Hom(∀X: ∈ s)(∀Y: ∈ s): = {f|f ∈ s.homomorphism}[∀f: ∈ set.Hom(X)(Y)],
					s.Epi(∀X: ∈ s)(∀Y: ∈ s): = {f|f ∈ s.epimorphism}[∀f: ∈ set.Epi(X)(Y)],
					; s.Mon(∀X: ∈ s)(∀Y: ∈ s): = {f|f ∈ s.monomorphism}[∀f: ∈ set.Hom(X, Y)],
					s.End(∀X: ∈ s): = {f|f ∈ s.endomorphism}[∀f: ∈ set.End(X)],
					; s.Iso(∀X: ∈ s)(∀Y: ∈ s): = {f|f ∈ s.endomorphism}[∀f: ∈ set.Iso(X, Y)],
					s.Aut(∀X: ∈ s): = {f|f ∈ s.automorphism}[∀f: ∈ set.Aut(X)],
				; end
			; end

			; about inherence
				s.sub(∀X: ∈ s): ; + there should be a universal property
				(
					⊆ set.sub(X),
					⊆ s,
				),
			; end
	),

	; location
		singleton: ; or singleton_structure
		(
			; ?
			⊆ class.singleton,
			⊆ structure,
		),

		universal: ; or universal_structure ; originate from the universal property.
		(
			; ?
			"instances unique up to isomorphism, also, every space defined by universal property is a universal structure"
			⊆ structure,

			∀s: ∈ universal, 
			∀X: ∈ s, ∀Y: ∈ s,

			X ∈ s.isomorphic(Y)
		),
			unique_up_to_isomorphism: = universal, ; ? I don;t like this name indeed
			uni-iso: = universal, ; * Mario's suggestion
		[ properties:
			* a (structure-) singleton is always unique_up_to_isomorphism
		]


),