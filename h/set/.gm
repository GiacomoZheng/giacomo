: ; + set
(
	; about ZFC (https://en.wikipedia.org/wiki/Zermelo–Fraenkel_set_theory)
		(
			∀A: ∈ set,
			∃B: ∈ set, ∀x: ∈ ◉, x ∈ A ⇔ x ∈ B
		), ; 1. extension, ; ? I don't know why we need it

		(
			∀A: ∈ set,
			!(A = ∅) ⇒
			(
				∃x: ∈ A, x ∈ set ⇒ x ∩ A = ∅ ; ! if not?
			)
		), ; 2. regularity

		(
			∀A: ∈ set,
			∀cls: gm.⊆ ◉,
			∃B: ∈ set, ∀x: ∈ B, x ∈ cls
		), ; 3. specification

		(
			∃∅: ∈ set,
			∀x: ∈ ◉, !(x ∈ ◉)
		), ; 3.2: empty set
		(
			∀x: ∈ ◉, ∃A: ∈ set,
			∀y: ∈ A, y = x
		), ; 3.3: existence singleton set
		(

		)
	; end

	gm.⊆ ◉,
	(
		∀X: ∈ set,

		; attributes
			X.cover(∀S: ⊆ subset):
			(
				"cover of S, set of subsets",
				gm.⊆ sub(Ps(S)), ; every element of the cover should be a subset of the S of it
				∀𝒞: ∈ X.cover(S),
				!({} ∈ 𝒞), ; at least the partition cannot caontains the empty element ; ? others may not require the sets in covers nonempty
				S ⊆ ∪(𝒞)
			),
	),

	; location
		; about alias
			cover(∀X: ∈ set): = X.cover(X),
			[ the only cover of ∅ is {}, not {∅} ]
		; end

		sub(∀S: ∈ set):
		(
			"subset",
			gm.⊆ set,
			∀A: ∈ sub(S),
			∀a: ∈ A, a ∈ S
		),
		⊆: (∈ relator, &⊆&.r = sub),

		element(∀S: ∈ set): ; +
		(
		),

		Ps(∀S: ∈ set): = {A}[∀A: ⊆ S], ; + return a set ; I'll create another function return a class

		partition(∀S: ∈ set):
		(
			gm.⊆ cover(S),

			∀𝒫: ∈ partition(S), ; ? sets in 𝒫 is nonempty as I define cover as so
			∀A: ∈ 𝒫, ∀B: ∈ 𝒫,
			!(A = B) ⇒ A ∩ B = ∅
		),

		equal(∀S: ∈ set): ; ?
		(
			gm.⊆ set,
		)
		=: (∈ relator, &=&.r = equal),

		×: ; !
		(
			∈ operator,
			∀A: ∈ set, ∀B: ∈ set,
			A × B = {(x, y)}[∀x: ∈ A, ∀y: ∈ B]
		),

		∪: ; !
		(
			; ∈
			∀τ: ∈ set, ; set of set
			∪[](τ) = {x}[∀x: ∈ ◉, ∃C: ∈ τ, x ∈ C],

			∀A: ∈ ◉, ∀B: ∈ ◉,
			∀(A ∈ set, B ∈ set) ⇒ (A ∪ B) = ∪[]({A, B})
		),

		∩: ; !
		(
			; ∈

			∀τ: ∈ set, ; set of set
			∩[](τ) = {x}[∀x: ∈ ◉, ∀C: ∈ τ, x ∈ C], ; !

			∀A: ∈ ◉, ∀B: ∈ ◉,
			∀(A ∈ set, B ∈ set) ⇒ A ∩ B = ∩[]({A, B}) ; !
		),
),
