: ; homomorphism, or mapping, or map
(
	⊆ function[◉][◉], ; ? maybe I'll to change it to a relation
	(
		∀f: ∈ homomorphism,
		f.D: ∈ set, ; domain
		f.C: ∈ set, ; codomain

		@f,
			input = D.element,
			output = C.element,
		■

		; attributes, you can never overwrite it in subclasses
			f.image(∀W: ⊆ f.D): = {f(x)}[∀x: ∈ W],
				f.image.C: = Ps(f.C),

			f.inv_image(∀U: ⊆ f.C): = {x|f(x) ∈ U}[∀x: ∈ f.D],
				f.inv_image.C: = Ps(f.C),
				f.inv'image: = f.inv_image,
				f.inverse_image: = f.inv_image,
				f.preimage: = f.inv_image, ; ? it is a little bit confusing since it looks like something weeker than image
			f.fiber(∀b: ∈ f.C): = f.inv_image({b}),
			
			f.restriction[∀U: ⊆ f.D](∀x: ∈ U): = f(x), ; ?
				f.restriction[∀U: ⊆ f.D].D: = U,
				f.restriction[∀U: ⊆ f.D].C: = f.C, ; ?
			f.restriction[∀U: ⊆ f.D][∀V: ⊆ f.image(U)](∀x: ∈ U): = f(x),
				f.restriction[∀U: ⊆ f.D][∀V: ⊆ f.image(U)].D: = U,
				f.restriction[∀U: ⊆ f.D, ∀V: ∈ f.C].C: = V, ; ?

			f.restriction:
			(
				"a map with smaller (or =) domain or codomaim",
				⊆ homomorphism,
				∀g: ∈ f.restriction,
				g.D ⊆ f.D, g.C ⊆ f.C,
				∀x: ∈ g.D, g(x) = f(x)
			),
			f.extension: ; ?
			(
				"a map with bigger (or =) domain or codomaim",
				⊆ homomorphism,
				∀g: ∈ f.restriction,
				g.D ⊇ f.D, g.C ⊇ f.C,
				∀x: ∈ f.D, g(x) = f(x)
			),
	),
	
	; location
		∘:
		(
			∈ keyword(r"\$homomorphism\=\1 \*∘ \*\$homomorphism\=\2 \*( \*\2\.\$D\=\3 \*)\/\1(\2(\3))"p), ; ! keyword
		),
),
