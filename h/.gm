; about alias
	; about set
		; about morphism
			mapping: = set.homomorphism,
				map: = set.homomorphism, ; I don't like to use it
			injection: = set.monomorphism,
			surjection: = set.epimorphism,
			bijection: = set.isomorphism,

			permutation: = set.automorphism,
		; end

		cover(∀X: ∈ set): = X.cover(X),
		partition(∀X: ∈ set): = X.partition,
	; end

	; about function
		∘: = &set.homomorphism.∘&,
	; end

	; ! about relation
		multivalued_function: = set.relation, ; I'll use it is complex analysis
		
		endo_relation: = endorelation,
		homogeneous_relation: = endorelation,

		reflexive_relation: = relation.reflexive,
		transitive_relation: = relation.transitive,
		symmetric_relation: = relation.symmetric,

		irreflexive_relation: = relation.irreflexive,
		antitransitive_relation: = relation.antitransitive,
		antisymmetric_relation: = relation.antisymmetric,

		preorder_relation: = relation.preorder,

		equivalent_relation: = relation.equivalent,
		order_relation: = relation.order,
	; end

	; ! about operator
		associative_operator: = operator.associative,
		commutative_operator: = operator.commutative,
	; end

	; about analysis
		; about real analysis
		
		; end

		; about complex analysis
			complex_function: = ℂ.function,
		; end
	; end

	; about number theory

	; end
; end

; ! about variable
	variable(∀D: ∈ set): ; ?
	(
		"a generalization of random variable in statistics",
		"a subset which can work as an element"
		; for example: [0, 1] + [2, 4] = [2, 4], we can read it as the summation of two variables",
		; + it will be use in analysis to define something like polynomial or dy/dx
		⊆ set.sub(D), ; Intuitively, the domain for it to pick some
		(
			∀X: ∈ variable,
			; * a subclass of set, may catch some operators with it
		)
	),
	[ hierarchy chain: variable ⊇ random_variable ]

	constant(∀x: ∈ variable): ; +
	(
		; ⊆ variable
	)
; end

; about operators and relators
	operator[∀p: ∈ operation]: ; ?
	(
		∈ operator,
		&operator[p]&.operation = p
	),

	relator[∀R: ∈ relation]: ; ?
	(
		∈ relator,
		&relator[p]&.relation = R
	),
; end